[{"path":"https://selkamand.github.io/sigstats/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 sigstats authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://selkamand.github.io/sigstats/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sam El-Kamand. Author, maintainer.","code":""},{"path":"https://selkamand.github.io/sigstats/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"El-Kamand S (2024). sigstats: Mathematical Operations Transformations Sigverse Signatures Catalogues. R package version 0.0.0.9000, https://selkamand.github.io/sigstats/, https://github.com/selkamand/sigstats.","code":"@Manual{,   title = {sigstats: Mathematical Operations and Transformations for Sigverse Signatures and Catalogues},   author = {Sam El-Kamand},   year = {2024},   note = {R package version 0.0.0.9000, https://selkamand.github.io/sigstats/},   url = {https://github.com/selkamand/sigstats}, }"},{"path":"https://selkamand.github.io/sigstats/index.html","id":"sigstats","dir":"","previous_headings":"","what":"Mathematical Operations and Transformations for Sigverse Signatures and Catalogues","title":"Mathematical Operations and Transformations for Sigverse Signatures and Catalogues","text":"sigstats enables common mathematical operations / transformations applied sigverse style signatures / catalogues","code":""},{"path":"https://selkamand.github.io/sigstats/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Mathematical Operations and Transformations for Sigverse Signatures and Catalogues","text":"can install development version sigstats like :","code":"if (!require(\"pak\", quietly = TRUE))     install.packages(\"pak\")  pak::pak(\"selkamand/sigstats\")"},{"path":"https://selkamand.github.io/sigstats/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick Start","title":"Mathematical Operations and Transformations for Sigverse Signatures and Catalogues","text":"","code":"library(sigstats) library(sigstash) library(sigvis)  # Load a signature collection signatures <- sig_load(\"COSMIC_v3.3.1_SBS_GRCh38\")  # Create a model that represents a mix of SBS2 (40%) and SBS13 (60%) model <- c(SBS2 = 0.4, SBS13 = 0.6)  # Add selected signatures to the combined model combined_signatures <- sig_combine(signatures, model)  # Visualise result sig_visualise(   combined_signatures,    class = \"model\",   title = \"Model\",   subtitle = \"Created by combining SBS2 (40%) and SBS13 (60%)\"   ) #> ✔ All channels matched perfectly to set [sbs_96]. Using this set for sort order #> ✔ All types matched perfectly to set [sbs_type]. Using this set for sort order #> ✔ Types matched perfectly to palette [snv_type]"},{"path":"https://selkamand.github.io/sigstats/index.html","id":"reconstruct-a-mutation-catalogue-from-a-signature-model","dir":"","previous_headings":"Quick Start","what":"Reconstruct a mutation catalogue from a signature model","title":"Mathematical Operations and Transformations for Sigverse Signatures and Catalogues","text":"often need reconstruct catalogue (tally) signature model.","code":"# Load a signature collection signatures <- sig_load(\"COSMIC_v3.3.1_SBS_GRCh38\")  # Create a model that represents a mix of SBS2 (40%) and SBS13 (60%) model <- c(SBS2 = 0.4, SBS13 = 0.6)  # Create a new signature by combining SBS2 and SBS13 in ratios dictated by the above model signature <- sig_combine(signatures, model, format = \"signature\")  # Reconstruct a perfect catalogue describing what the mutational profile of a sample # with 200 mutations and the given signature model would look like reconstuction <- sig_reconstruct(signature, n=200)  # Visualise result sig_visualise(   reconstuction,    class = \"catalogue\",   title = \"Reconstructed Catalogue\",   subtitle = \"Expected profile of a sample with 200 mutations: 40% from SBS2, 60% from SBS13\"   ) #> ✔ All channels matched perfectly to set [sbs_96]. Using this set for sort order #> ✔ All types matched perfectly to set [sbs_type]. Using this set for sort order #> ✔ Types matched perfectly to palette [snv_type]"},{"path":"https://selkamand.github.io/sigstats/reference/sig_combine.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Signatures to a Combined Signature Model — sig_combine","title":"Add Signatures to a Combined Signature Model — sig_combine","text":"function takes signature collection model input adds selected signatures combined signature model. default output data.frame 'combined_signature_model' style data.frame format Sigverse package.","code":""},{"path":"https://selkamand.github.io/sigstats/reference/sig_combine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Signatures to a Combined Signature Model — sig_combine","text":"","code":"sig_combine(   signatures,   model,   format = c(\"signature\", \"combined\"),   verbose = FALSE )"},{"path":"https://selkamand.github.io/sigstats/reference/sig_combine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Signatures to a Combined Signature Model — sig_combine","text":"signatures sigverse signature collection. See (sigshared::example_signature_collection()) details. model named numeric vector representing contribution signature combined model. names correspond signatures, values represent contributions. sum values vector less equal 1. format character string indicating output format. \"combined\", function returns 'combined_signature_model' data.frame row represents contribution particular channel single signature (duplicate channels collapsed). \"signature\", function returns data sigverse signature format, representing novel signature created combining signatures collection according ratios described model. verbose enables detailed output messages (flag).","code":""},{"path":"https://selkamand.github.io/sigstats/reference/sig_combine.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Signatures to a Combined Signature Model — sig_combine","text":"data.frame 'combined_signature_model' style containing selected signatures modified fractions based model.","code":""},{"path":[]},{"path":"https://selkamand.github.io/sigstats/reference/sig_combine.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Signatures to a Combined Signature Model — sig_combine","text":"","code":"library(sigstash)  # Load a signature collection signatures <- sig_load(\"COSMIC_v3.3.1_SBS_GRCh38\")  # Create a model that represents a mix of SBS1 (40%) and SBS2 (60%) model <- c(SBS1 = 0.4, SBS2 = 0.6)  # Add selected signatures to the combined model combined_signatures <- sig_combine(signatures, model) print(combined_signatures) #>    type channel     fraction #> 1   C>A A[C>A]A 3.507565e-04 #> 2   C>A A[C>A]C 9.753506e-04 #> 3   C>A A[C>A]G 1.040620e-04 #> 4   C>A A[C>A]T 5.645758e-04 #> 5   C>G A[C>G]A 7.356219e-04 #> 6   C>G A[C>G]C 5.536380e-04 #> 7   C>G A[C>G]G 5.605870e-05 #> 8   C>G A[C>G]T 5.052782e-04 #> 9   C>T A[C>T]A 9.923988e-03 #> 10  C>T A[C>T]C 3.275645e-03 #> 11  C>T A[C>T]G 1.482697e-01 #> 12  C>T A[C>T]T 4.900869e-03 #> 13  T>A A[T>A]A 3.704447e-04 #> 14  T>A A[T>A]C 1.405570e-03 #> 15  T>A A[T>A]G 4.620521e-04 #> 16  T>A A[T>A]T 7.178224e-05 #> 17  T>C A[T>C]A 4.637984e-04 #> 18  T>C A[T>C]C 1.213215e-03 #> 19  T>C A[T>C]G 4.939210e-05 #> 20  T>C A[T>C]T 2.343610e-03 #> 21  T>G A[T>G]A 2.086691e-04 #> 22  T>G A[T>G]C 1.263457e-04 #> 23  T>G A[T>G]G 1.062807e-04 #> 24  T>G A[T>G]T 4.616597e-05 #> 25  C>A C[C>A]A 2.451991e-04 #> 26  C>A C[C>A]C 7.513668e-04 #> 27  C>A C[C>A]G 3.678179e-05 #> 28  C>A C[C>A]T 2.493459e-04 #> 29  C>G C[C>G]A 9.424529e-06 #> 30  C>G C[C>G]C 2.363192e-04 #> 31  C>G C[C>G]G 1.680262e-04 #> 32  C>G C[C>G]T 3.766841e-05 #> 33  C>T C[C>T]A 3.340651e-03 #> 34  C>T C[C>T]C 2.048862e-04 #> 35  C>T C[C>T]G 7.900789e-02 #> 36  C>T C[C>T]T 9.354423e-04 #> 37  T>A C[T>A]A 1.615965e-04 #> 38  T>A C[T>A]C 3.007052e-04 #> 39  T>A C[T>A]G 2.161075e-04 #> 40  T>A C[T>A]T 1.028904e-04 #> 41  T>C C[T>C]A 1.798213e-04 #> 42  T>C C[T>C]C 1.002896e-03 #> 43  T>C C[T>C]G 1.415402e-04 #> 44  T>C C[T>C]T 1.283336e-04 #> 45  T>G C[T>G]A 1.050587e-04 #> 46  T>G C[T>G]C 1.761738e-04 #> 47  T>G C[T>G]G 1.223743e-04 #> 48  T>G C[T>G]T 1.893343e-04 #> 49  C>A G[C>A]A 6.739429e-04 #> 50  C>A G[C>A]C 1.317277e-04 #> 51  C>A G[C>A]G 2.414671e-04 #> 52  C>A G[C>A]T 3.039667e-05 #> 53  C>G G[C>G]A 4.280223e-05 #> 54  C>G G[C>G]C 2.173235e-04 #> 55  C>G G[C>G]G 6.592130e-05 #> 56  C>G G[C>G]T 7.955379e-05 #> 57  C>T G[C>T]A 1.749326e-03 #> 58  C>T G[C>T]C 3.613588e-05 #> 59  C>T G[C>T]G 8.657135e-02 #> 60  C>T G[C>T]T 4.497471e-05 #> 61  T>A G[T>A]A 3.173979e-05 #> 62  T>A G[T>A]C 1.282647e-04 #> 63  T>A G[T>A]G 1.353408e-04 #> 64  T>A G[T>A]T 1.408428e-04 #> 65  T>C G[T>C]A 4.104283e-04 #> 66  T>C G[T>C]C 7.606214e-04 #> 67  T>C G[T>C]G 5.261763e-04 #> 68  T>C G[T>C]T 3.598995e-05 #> 69  T>G G[T>G]A 1.237254e-04 #> 70  T>G G[T>G]C 7.891291e-05 #> 71  T>G G[T>G]G 1.596591e-04 #> 72  T>G G[T>G]T 5.823419e-06 #> 73  C>A T[C>A]A 4.088038e-04 #> 74  C>A T[C>A]C 1.100521e-03 #> 75  C>A T[C>A]G 5.188617e-05 #> 76  C>A T[C>A]T 2.670355e-04 #> 77  C>G T[C>G]A 2.217865e-16 #> 78  C>G T[C>G]C 1.391628e-04 #> 79  C>G T[C>G]G 5.293497e-05 #> 80  C>G T[C>G]T 1.329548e-03 #> 81  C>T T[C>T]A 3.215172e-01 #> 82  C>T T[C>T]C 5.819379e-02 #> 83  C>T T[C>T]G 7.106643e-02 #> 84  C>T T[C>T]T 1.804772e-01 #> 85  T>A T[T>A]A 2.858385e-03 #> 86  T>A T[T>A]C 1.165516e-04 #> 87  T>A T[T>A]G 4.116638e-05 #> 88  T>A T[T>A]T 1.010989e-03 #> 89  T>C T[T>C]A 9.904566e-05 #> 90  T>C T[T>C]C 1.385195e-03 #> 91  T>C T[T>C]G 2.350857e-04 #> 92  T>C T[T>C]T 1.731088e-03 #> 93  T>G T[T>G]A 9.823727e-06 #> 94  T>G T[T>G]C 6.482091e-05 #> 95  T>G T[T>G]G 2.883043e-04 #> 96  T>G T[T>G]T 2.214016e-16  # Visualise using sigvis"},{"path":"https://selkamand.github.io/sigstats/reference/sig_combine_collapse_to_single_signature.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapse to single signatures — sig_combine_collapse_to_single_signature","title":"Collapse to single signatures — sig_combine_collapse_to_single_signature","text":"Convert output sig_combine() simple sigverse signature object. useful want run maths signature derived model Note visualisation signature combination models, suggest directly using output sig_combine() sigvis::sig_visualise() sigvis::sig_make_interactive() run original signature contributions preserved","code":""},{"path":"https://selkamand.github.io/sigstats/reference/sig_combine_collapse_to_single_signature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collapse to single signatures — sig_combine_collapse_to_single_signature","text":"","code":"sig_combine_collapse_to_single_signature(signature_combination)"},{"path":"https://selkamand.github.io/sigstats/reference/sig_combine_collapse_to_single_signature.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collapse to single signatures — sig_combine_collapse_to_single_signature","text":"signature_combination dataframe produced sig_combine() represents combination multiple signatures known (exact) proportions - individual signature kept distinct make easy plot stackedbar","code":""},{"path":"https://selkamand.github.io/sigstats/reference/sig_combine_collapse_to_single_signature.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collapse to single signatures — sig_combine_collapse_to_single_signature","text":"data.frame sigverse signature format","code":""},{"path":"https://selkamand.github.io/sigstats/reference/sig_combine_collapse_to_single_signature.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collapse to single signatures — sig_combine_collapse_to_single_signature","text":"","code":"library(sigstash)  # Load a signature collection signatures <- sig_load(\"COSMIC_v3.3.1_SBS_GRCh38\")  # Create a model that represents a mix of SBS1 (40%) and SBS2 (60%) model <- c(SBS1 = 0.4, SBS2 = 0.6)  # Add selected signatures to the combined model combined_signatures <- sig_combine(signatures, model)  # Flatten the combined_signatures dataframe that keeps separate signatures signature <- sig_combine_collapse_to_single_signature(combined_signatures)"},{"path":"https://selkamand.github.io/sigstats/reference/sig_compute_experimental_p_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Experimental P-Value Based on Bootstrap Contributions — sig_compute_experimental_p_value","title":"Calculate Experimental P-Value Based on Bootstrap Contributions — sig_compute_experimental_p_value","text":"single signature, calculate proportion bootstraps percentage contribution specified threshold. value represents 'experimental' P-value. example, P < 0.05, <5% chance signature contribution >= threshold chance.","code":""},{"path":"https://selkamand.github.io/sigstats/reference/sig_compute_experimental_p_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Experimental P-Value Based on Bootstrap Contributions — sig_compute_experimental_p_value","text":"","code":"sig_compute_experimental_p_value(bootstraps, threshold)"},{"path":"https://selkamand.github.io/sigstats/reference/sig_compute_experimental_p_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Experimental P-Value Based on Bootstrap Contributions — sig_compute_experimental_p_value","text":"bootstraps numeric vector describing percentage contributions single signature different bootstraps. threshold numeric value specifying minimum contribution threshold (typically 0.05). referred sparsity threshold.","code":""},{"path":"https://selkamand.github.io/sigstats/reference/sig_compute_experimental_p_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Experimental P-Value Based on Bootstrap Contributions — sig_compute_experimental_p_value","text":"proportion bootstraps contributions threshold. represents experimental p-value (referred sparsity p-value).","code":""},{"path":"https://selkamand.github.io/sigstats/reference/sig_compute_experimental_p_value.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Experimental P-Value Based on Bootstrap Contributions — sig_compute_experimental_p_value","text":"","code":"bootstraps <- c(0.01, 0.03, 0.07, 0.02, 0.05) threshold <- 0.05 sig_compute_experimental_p_value(bootstraps, threshold) #> [1] 0.6"},{"path":"https://selkamand.github.io/sigstats/reference/sig_cosine_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Cosine Matrix Between Two Signatures — sig_cosine_similarity","title":"Calculate Cosine Matrix Between Two Signatures — sig_cosine_similarity","text":"Computes cosine similarity pair signatures sigverse signature collection","code":""},{"path":"https://selkamand.github.io/sigstats/reference/sig_cosine_similarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Cosine Matrix Between Two Signatures — sig_cosine_similarity","text":"","code":"sig_cosine_similarity(signature1, signature2, assume_sensible_input = FALSE)"},{"path":"https://selkamand.github.io/sigstats/reference/sig_cosine_similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Cosine Matrix Between Two Signatures — sig_cosine_similarity","text":"signature1, signature2 sigverse signature data.frames. See sigshared::example_signature(). assume_sensible_input logical flag indicating whether skip validation checks input signatures. Enabling option can significantly speed cosine similarity calculation assuming inputs valid signature objects channels already sorted. option used performance critical assumptions can verified upstream.","code":""},{"path":"https://selkamand.github.io/sigstats/reference/sig_cosine_similarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Cosine Matrix Between Two Signatures — sig_cosine_similarity","text":"number 0 1 representing cosine similarity","code":""},{"path":"https://selkamand.github.io/sigstats/reference/sig_cosine_similarity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Cosine Matrix Between Two Signatures — sig_cosine_similarity","text":"","code":"library(sigstash)  # Load a signature collection signatures <- sig_load(\"COSMIC_v3.3.1_SBS_GRCh38\")  # Compute cosine similarity between two signatures sig_cosine_similarity(signatures[[\"SBS1\"]], signatures[[\"SBS2\"]]) #> [1] 0.02031489"},{"path":"https://selkamand.github.io/sigstats/reference/sig_model_to_string.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Signature Model to String Representation — sig_model_to_string","title":"Convert Signature Model to String Representation — sig_model_to_string","text":"function converts named numeric vector model representing signature contributions formatted string. default, contributions displayed percentages, options customize formatting. Unexplained portions model (.e., contributions accounted signatures) can optionally displayed.","code":""},{"path":"https://selkamand.github.io/sigstats/reference/sig_model_to_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Signature Model to String Representation — sig_model_to_string","text":"","code":"sig_model_to_string(   model,   signature_sep = \" = \",   pair_sep = \" | \",   show_percent = TRUE,   significant_digits = 2,   include_unexplained = TRUE,   unexplained_label = \"?\" )"},{"path":"https://selkamand.github.io/sigstats/reference/sig_model_to_string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Signature Model to String Representation — sig_model_to_string","text":"model named numeric vector representing contribution signature combined model. names correspond signatures, values represent contributions. sum values vector less equal 1. signature_sep character string used separate signature name value (default \" = \"). pair_sep character string used separate different signatures (default \" | \"). show_percent logical indicating whether format values percentages (default TRUE). significant_digits number significant digits display contributions (default 2). include_unexplained logical flag indicating whether include unexplained portion model (default TRUE). unexplained_label character string label unexplained portion model (default \"?\").","code":""},{"path":"https://selkamand.github.io/sigstats/reference/sig_model_to_string.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Signature Model to String Representation — sig_model_to_string","text":"string representing signature model contributions formatted according specified options.","code":""},{"path":"https://selkamand.github.io/sigstats/reference/sig_model_to_string.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Signature Model to String Representation — sig_model_to_string","text":"","code":"model <- c(SBS1 = 0.4, SBS2 = 0.6) sig_model_to_string(model) #> [1] \"SBS2 = 60% | SBS1 = 40% | ? = 0%\"  # Example with no unexplained portion, significant digits and percentages sig_model_to_string(   model,   significant_digits = 3,   show_percent = FALSE,   include_unexplained = FALSE   ) #> [1] \"SBS2 = 0.6 | SBS1 = 0.4\""},{"path":"https://selkamand.github.io/sigstats/reference/sig_reconstruct.html","id":null,"dir":"Reference","previous_headings":"","what":"Reconstruct a catalogue from a signature — sig_reconstruct","title":"Reconstruct a catalogue from a signature — sig_reconstruct","text":"Generates reconstructed substitution profile (catalogues) generated proportionally combining estimated contribution.","code":""},{"path":"https://selkamand.github.io/sigstats/reference/sig_reconstruct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reconstruct a catalogue from a signature — sig_reconstruct","text":"","code":"sig_reconstruct(signature, n)"},{"path":"https://selkamand.github.io/sigstats/reference/sig_reconstruct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reconstruct a catalogue from a signature — sig_reconstruct","text":"signature data.frame sigverse signature format. See sigshared::example_signature() details. n total number variants use reconstruction","code":""},{"path":"https://selkamand.github.io/sigstats/reference/sig_reconstruct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reconstruct a catalogue from a signature — sig_reconstruct","text":"data.frame conforming sigverse catalogue format","code":""},{"path":"https://selkamand.github.io/sigstats/reference/sig_reconstruct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reconstruct a catalogue from a signature — sig_reconstruct","text":"","code":"library(sigstash)  # Load a signature collection signatures <- sig_load(\"COSMIC_v3.3.1_SBS_GRCh38\")  # Create a model that represents a mix of SBS1 (40%) and SBS2 (60%) model <- c(SBS1 = 0.4, SBS2 = 0.6)  # Add selected signatures to the combined model combined_signatures <- sig_combine(signatures, model)  # Flatten the combined_signatures dataframe that keeps separate signatures signature <- sig_combine_collapse_to_single_signature(combined_signatures)  # Reconstruct a perfect catalogue describing what the mutational profile of a sample # with 200 mutations and the given signature model would look like reconstuction <- sig_reconstruct(signature, n=200)  # Visualise Result # sig_visualise(reconstuction, class = \"catalogue\")"},{"path":"https://selkamand.github.io/sigstats/reference/sig_subtract.html","id":null,"dir":"Reference","previous_headings":"","what":"Subtract Signature — sig_subtract","title":"Subtract Signature — sig_subtract","text":"Subtracts signature2 signature1 (factions) returns result. Works signatures. translate catalogue see sig_reconstruct()","code":""},{"path":"https://selkamand.github.io/sigstats/reference/sig_subtract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subtract Signature — sig_subtract","text":"","code":"sig_subtract(signature1, signature2)"},{"path":"https://selkamand.github.io/sigstats/reference/sig_subtract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subtract Signature — sig_subtract","text":"signature1, signature2 sigverse signature data.frames. See sigshared::example_signature().","code":""},{"path":"https://selkamand.github.io/sigstats/reference/sig_subtract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subtract Signature — sig_subtract","text":"data.frame representing sigverse signature","code":""},{"path":"https://selkamand.github.io/sigstats/reference/sig_subtract.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subtract Signature — sig_subtract","text":"","code":"library(sigstash)  # Load a signature collection signatures <- sig_load(\"COSMIC_v3.3.1_SBS_GRCh38\")  # Subtract signatures sig_subtract(signatures[['SBS3']], signatures[['SBS4']]) #> # A tibble: 96 × 3 #>    type  channel fraction #>    <chr> <chr>      <dbl> #>  1 C>A   A[C>A]A -0.0215  #>  2 C>A   A[C>A]C -0.0166  #>  3 C>A   A[C>A]G -0.0143  #>  4 C>A   A[C>A]T -0.0174  #>  5 C>G   A[C>G]A  0.0129  #>  6 C>G   A[C>G]C  0.00878 #>  7 C>G   A[C>G]G -0.00106 #>  8 C>G   A[C>G]T  0.0139  #>  9 C>T   A[C>T]A  0.00553 #> 10 C>T   A[C>T]C  0.00814 #> # ℹ 86 more rows"},{"path":"https://selkamand.github.io/sigstats/reference/sig_summarise_bootstraps.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise Signature Bootstraps — sig_summarise_bootstraps","title":"Summarise Signature Bootstraps — sig_summarise_bootstraps","text":"function computes summary statistics signature-level bootstraps, including quantiles, min/max contribution proportions, experimental p-value.","code":""},{"path":"https://selkamand.github.io/sigstats/reference/sig_summarise_bootstraps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise Signature Bootstraps — sig_summarise_bootstraps","text":"","code":"sig_summarise_bootstraps(   bootstraps,   threshold = 0.05,   outliers_as_strings = FALSE )"},{"path":"https://selkamand.github.io/sigstats/reference/sig_summarise_bootstraps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise Signature Bootstraps — sig_summarise_bootstraps","text":"bootstraps data frame containing bootstrap results sigverse-style format. See sigshared::example_bootstraps() details. threshold minimum proportion mutations must explained signature considered present bootstrap. threshold used calculating experimental p-value via sig_compute_experimental_p_value(). outliers_as_strings Logical. Return outliers character vector '|' delimited strings rather list-column (ignored return_dataframe = FALSE). Can customise delimiter using delim argument","code":""},{"path":"https://selkamand.github.io/sigstats/reference/sig_summarise_bootstraps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise Signature Bootstraps — sig_summarise_bootstraps","text":"data frame containing following columns: signatures Names signatures. quantiles, iqr, min, max,outlier_thresholds Statistical summary columns (quantiles, min, max) contribution proportions across bootstraps. outliers either list column character '|' outlier strings (depending outliers_as_strings argument p_value Computed experimental p-value signature, based threshold.","code":""},{"path":"https://selkamand.github.io/sigstats/reference/sig_summarise_bootstraps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise Signature Bootstraps — sig_summarise_bootstraps","text":"","code":"library(sigshared) bootstraps <- example_bootstraps() sig_summarise_bootstraps(bootstraps, threshold = 0.05) #>   signatures  min  max     q1     q3   iqr median n outlier_low_threshold #> 1 Signature1 0.30 0.44 0.3350 0.4050 0.070  0.370 2                 0.230 #> 2 Signature2 0.50 0.69 0.5475 0.6425 0.095  0.595 2                 0.405 #> 3 Signature3 0.01 0.06 0.0225 0.0475 0.025  0.035 2                -0.015 #>   outlier_high_threshold outliers p_value #> 1                  0.510              0.0 #> 2                  0.785              0.0 #> 3                  0.085              0.5"}]
